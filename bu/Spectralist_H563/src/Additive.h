#pragma once
#include "initialisation.h"
#include "AudioCodec.h"
#include <tuple>
#include <array>

class Additive {
public:
	Additive();


	static constexpr uint32_t maxHarmonics = 300;

	//std::array<uint16_t, harmonics> readPos;
	//uint16_t readPos[harmonics] = {0, 8192, 0, 12288, 0, 40960, 0, 26542, 21954, 18022, 9011, 39649, 22773, 45711, 17694, 35880, 58654, 43417, 27688, 52756, 5079, 20643, 33259, 16056, 39157, 53903, 12124, 63242, 14745, 36536, 4259, 54722, 11304, 45547, 17530, 9666, 2457, 57507, 43581, 32604, 15073, 64389, 46858, 21790, 52264, 10158, 24903, 19169, 52101, 61603, 20643, 27852, 5570, 44728, 6717, 43253, 327, 13434, 5734, 20316, 17039, 10158, 22118, 33914, 42270, 16384, 2621, 62586, 29491, 6553, 47349, 327, 8192, 38830, 53084, 23265, 26050, 38010, 36044, 53903, 50626, 40468, 7045, 46202, 64225, 10321, 7536, 20316, 59965, 47349, 33914, 327, 4751, 30801, 10649, 39321, 46694, 23756, 35880, 52920, 13926, 13926, 32276, 58327, 51281, 46202, 48005, 53575, 52428, 14581, 38174, 38338, 34078, 45219, 42598, 2785, 50790, 13434, 46202, 34897, 9830, 44564, 31457, 10485, 28344, 29491, 38338, 57671, 29163, 49971, 50790, 15892, 28672, 19005, 58654, 60456, 21463, 42926, 1146, 61767, 5406, 11796, 59637, 21135, 29163, 12451, 64225, 48168, 34406, 46530, 59310, 61931, 63569, 6225, 59310, 55541, 7864, 24576, 46530, 59146, 3112, 19660, 42434, 35553, 11304, 4915, 7864, 58327, 53411, 47185, 25067, 23265, 20152, 64880, 36864, 55869, 25559, 15073, 29982, 36372, 27033, 41451, 39976, 49643, 57344, 163, 2621, 52592, 41615, 20480, 64061, 64716, 49479, 58163, 55050, 63897, 5570, 47513, 15892, 40796};
	uint32_t readPos[maxHarmonics] = {0, 8192, 0, 12288, 0, 40960, 0, 26542, 21954, 18022, 9011, 39649, 22773, 45711, 17694, 35880, 58654, 43417, 27688, 52756, 5079, 20643, 33259, 16056, 39157, 53903, 12124, 63242, 14745, 36536, 4259, 54722, 11304, 45547, 17530, 9666, 2457, 57507, 43581, 32604, 15073, 64389, 46858, 21790, 52264, 10158, 24903, 19169, 52101, 61603, 20643, 27852, 5570, 44728, 6717, 43253, 327, 13434, 5734, 20316, 17039, 10158, 22118, 33914, 42270, 16384, 2621, 62586, 29491, 6553, 47349, 327, 8192, 38830, 53084, 23265, 26050, 38010, 36044, 53903, 50626, 40468, 7045, 46202, 64225, 10321, 7536, 20316, 59965, 47349, 33914, 327, 4751, 30801, 10649, 39321, 46694, 23756, 35880, 52920, 13926, 13926, 32276, 58327, 51281, 46202, 48005, 53575, 52428, 14581, 38174, 38338, 34078, 45219, 42598, 2785, 50790, 13434, 46202, 34897, 9830, 44564, 31457, 10485, 28344, 29491, 38338, 57671, 29163, 49971, 50790, 15892, 28672, 19005, 58654, 60456, 21463, 42926, 1146, 61767, 5406, 11796, 59637, 21135, 29163, 12451, 64225, 48168, 34406, 46530, 59310, 61931, 63569, 6225, 59310, 55541, 7864, 24576, 46530, 59146, 3112, 19660, 42434, 35553, 11304, 4915, 7864, 58327, 53411, 47185, 25067, 23265, 20152, 64880, 36864, 55869, 25559, 15073, 29982, 36372, 27033, 41451, 39976, 49643, 57344, 163, 2621, 52592, 41615, 20480, 64061, 64716, 49479, 58163, 55050, 63897, 5570, 47513, 15892, 40796, 47185, 29327, 26378, 28835, 53903, 63406, 4751, 52756, 3112, 55705, 58818, 9338, 32440, 5242, 37519, 37191, 2457, 38666, 48824, 50954, 17203, 47513, 52592, 53575, 54558, 47513, 56197, 39157, 52428, 23265, 59965, 43089, 25231, 2621, 14090, 9338, 62095, 18677, 5406, 49315, 21463, 20152, 54558, 57344, 19169, 55541, 53248, 45875, 29982, 37027, 59965, 53903, 37683, 3932, 1966, 34078, 33095, 59965, 29818, 25722, 57344, 9666, 53411, 38993, 20643, 32276, 58327, 35553, 26705, 52920, 13107, 53903, 7372, 12943, 62914, 26869, 50135, 32440, 6062, 63242, 15400, 41779, 29655, 56852, 46202, 41779, 6389, 65208, 12779, 28508, 19824, 60784, 3440, 491, 60456, 63078, 62750, 42598, 4096, 60948};
	std::pair<float, float> ProcessSamples(Samples& samples);
	void IdleJobs();

	static constexpr uint32_t sinLUTSize = 131072;
	static constexpr uint32_t lutMask = sinLUTSize - 1;				// 0x1FFFF
	constexpr auto CreateSinLUT(float* array)
	{
		//std::array<float, sinLUTSize> array {};
		for (uint32_t s = 0; s < sinLUTSize; ++s){
			array[s] = std::sin(s * 2.0f * std::numbers::pi / sinLUTSize);
		}
		//return array;
	}

	uint32_t harmonics = 260;
	uint32_t maxHarmonic;
	float prevIncErr = 0.0f;
private:

	float smoothedInc = 0.0f;

	GpioPin octaveDown	{GPIOD, 6, GpioPin::Type::Input};
	GpioPin debug1		{GPIOC, 10, GpioPin::Type::Output};

};

extern Additive additive;
