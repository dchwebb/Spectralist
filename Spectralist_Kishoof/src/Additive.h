#pragma once
#include "initialisation.h"
#include "WaveTable.h"
#include <tuple>
#include <array>

class Additive {
public:
	Additive();


	static constexpr uint32_t maxHarmonics = 200;

	//std::array<uint16_t, harmonics> readPos;
	//uint32_t readPos[maxHarmonics] = {0, 8192, 0, 12288, 0, 40960, 0, 26542, 21954, 18022, 9011, 39649, 22773, 45711, 17694, 35880, 58654, 43417, 27688, 52756, 5079, 20643, 33259, 16056, 39157, 53903, 12124, 63242, 14745, 36536, 4259, 54722, 11304, 45547, 17530, 9666, 2457, 57507, 43581, 32604, 15073, 64389, 46858, 21790, 52264, 10158, 24903, 19169, 52101, 61603, 20643, 27852, 5570, 44728, 6717, 43253, 327, 13434, 5734, 20316, 17039, 10158, 22118, 33914, 42270, 16384, 2621, 62586, 29491, 6553, 47349, 327, 8192, 38830, 53084, 23265, 26050, 38010, 36044, 53903, 50626, 40468, 7045, 46202, 64225, 10321, 7536, 20316, 59965, 47349, 33914, 327, 4751, 30801, 10649, 39321, 46694, 23756, 35880, 52920, 13926, 13926, 32276, 58327, 51281, 46202, 48005, 53575, 52428, 14581, 38174, 38338, 34078, 45219, 42598, 2785, 50790, 13434, 46202, 34897, 9830, 44564, 31457, 10485, 28344, 29491, 38338, 57671, 29163, 49971, 50790, 15892, 28672, 19005, 58654, 60456, 21463, 42926, 1146, 61767, 5406, 11796, 59637, 21135, 29163, 12451, 64225, 48168, 34406, 46530, 59310, 61931, 63569, 6225, 59310, 55541, 7864, 24576, 46530, 59146, 3112, 19660, 42434, 35553, 11304, 4915, 7864, 58327, 53411, 47185, 25067, 23265, 20152, 64880, 36864, 55869, 25559, 15073, 29982, 36372, 27033, 41451, 39976, 49643, 57344, 163, 2621, 52592, 41615, 20480, 64061, 64716, 49479, 58163, 55050, 63897, 5570, 47513, 15892, 40796};
	uint32_t readPos[maxHarmonics] = {0,536870912,0,805306368,0,2684354560,0,1739461754,1438814044,1181116006,590558003,2598455214,1492501135,2995739688,1159641169,2351494594,3843995729,2845415833,1814623682,3457448673,332859965,1352914698,2179695902,1052266987,2566242959,3532610600,794568949,4144643440,966367641,2394444267,279172874,3586297692,740881858,2985002270,1148903751,633507676,161061273,3768833802,2856153251,2136746229,987842478,4219805368,3070901616,1428076625,3425236418,665719930,1632087572,1256277934,3414499000,4037269258,1352914698,1825361100,365072220,2931315179,440234147,2834678415,21474836,880468295,375809638,1331439861,1116691496,665719930,1449551462,2222645575,2770253905,1073741824,171798691,4101693767,1932735283,429496729,3103113871,21474836,536870912,2544768122,3478923509,1524713390,1707249500,2491081031,2362232012,3532610600,3317862236,2652142305,461708984,3027951943,4209067950,676457349,493921239,1331439861,3929895075,3103113871,2222645575,21474836,311385128,2018634629,697932185,2576980377,3060164198,1556925644,2351494594,3468186091,912680550,912680550,2115271393,3822520893,3360811909,3027951943,3146063544,3511135764,3435973836,955630223,2501818449,2512555868,2233382993,2963527434,2791728742,182536110,3328599654,880468295,3027951943,2287070085,644245094,2920577761,2061584302,687194767,1857573355,1932735283,2512555868,3779571220,1911260446,3274912563,3328599654,1041529569,1879048192,1245540515,3843995729,3962107330,1406601789,2813203578,75161927,4048006676,354334801,773094113,3908420239,1385126952,1911260446,816043786,4209067950,3156800962,2254857830,3049426780,3886945402,4058744094,4166118277,408021893,3886945402,3639984783,515396075,1610612736,3049426780,3876207984,204010946,1288490188,2780991324,2330019758,740881858,322122547,515396075,3822520893,3500398346,3092376453,1642824990,1524713390,1320702443,4252017623,2415919104,3661459619,1675037245,987842478,1964947537,2383706849,1771674009,2716566814,2619930050,3253437726,3758096384,10737418,171798691,3446711255,2727304232,1342177280,4198330531,4241280204,3242700308,3811783475,3607772528,4187593113,365072220,3113851289,1041529569,2673617141};
	//uint32_t readPos[maxHarmonics] = {0, 8192, 0, 12288, 0, 40960, 0, 26542, 21954, 18022, 9011, 39649, 22773, 45711, 17694, 35880, 58654, 43417, 27688, 52756, 5079, 20643, 33259, 16056, 39157, 53903, 12124, 63242, 14745, 36536, 4259, 54722, 11304, 45547, 17530, 9666, 2457, 57507, 43581, 32604, 15073, 64389, 46858, 21790, 52264, 10158, 24903, 19169, 52101, 61603, 20643, 27852, 5570, 44728, 6717, 43253, 327, 13434, 5734, 20316, 17039, 10158, 22118, 33914, 42270, 16384, 2621, 62586, 29491, 6553, 47349, 327, 8192, 38830, 53084, 23265, 26050, 38010, 36044, 53903, 50626, 40468, 7045, 46202, 64225, 10321, 7536, 20316, 59965, 47349, 33914, 327, 4751, 30801, 10649, 39321, 46694, 23756, 35880, 52920, 13926, 13926, 32276, 58327, 51281, 46202, 48005, 53575, 52428, 14581, 38174, 38338, 34078, 45219, 42598, 2785, 50790, 13434, 46202, 34897, 9830, 44564, 31457, 10485, 28344, 29491, 38338, 57671, 29163, 49971, 50790, 15892, 28672, 19005, 58654, 60456, 21463, 42926, 1146, 61767, 5406, 11796, 59637, 21135, 29163, 12451, 64225, 48168, 34406, 46530, 59310, 61931, 63569, 6225, 59310, 55541, 7864, 24576, 46530, 59146, 3112, 19660, 42434, 35553, 11304, 4915, 7864, 58327, 53411, 47185, 25067, 23265, 20152, 64880, 36864, 55869, 25559, 15073, 29982, 36372, 27033, 41451, 39976, 49643, 57344, 163, 2621, 52592, 41615, 20480, 64061, 64716, 49479, 58163, 55050, 63897, 5570, 47513, 15892, 40796, 47185, 29327, 26378, 28835, 53903, 63406, 4751, 52756, 3112, 55705, 58818, 9338, 32440, 5242, 37519, 37191, 2457, 38666, 48824, 50954, 17203, 47513, 52592, 53575, 54558, 47513, 56197, 39157, 52428, 23265, 59965, 43089, 25231, 2621, 14090, 9338, 62095, 18677, 5406, 49315, 21463, 20152, 54558, 57344, 19169, 55541, 53248, 45875, 29982, 37027, 59965, 53903, 37683, 3932, 1966, 34078, 33095, 59965, 29818, 25722, 57344, 9666, 53411, 38993, 20643, 32276, 58327, 35553, 26705, 52920, 13107, 53903, 7372, 12943, 62914, 26869, 50135, 32440, 6062, 63242, 15400, 41779, 29655, 56852, 46202, 41779, 6389, 65208, 12779, 28508, 19824, 60784, 3440, 491, 60456, 63078, 62750, 42598, 4096, 60948};
	void CalcSample();
	void IdleJobs();

	static constexpr uint32_t sinLUTSize = 65536;
	static constexpr uint32_t lutMask = sinLUTSize - 1;				// 0x1FFFF
	constexpr auto CreateSinLUT(float* array)
	{
		//std::array<float, sinLUTSize> array {};
		for (uint32_t s = 0; s < sinLUTSize; ++s){
			array[s] = std::sin(s * 2.0f * std::numbers::pi / sinLUTSize);
		}
		//return array;
	}

	uint32_t maxHarmonic = 200;
	uint32_t aliasHarmonic;
	float prevIncErr = 0.0f;
private:
	float FastTanh(const float x);
	float outputSamples[2] = {0.0f, 0.0f};		// Preprepared samples sent to DAC on interrupt
	float smoothedInc = 0.0f;
	static constexpr float scaleOutput = -std::pow(2.0f, 31.0f);	// Multiple to convert -1.0 - 1.0 float to 32 bit int and invert
	static constexpr float scaleVCAOutput = scaleOutput / 65536.0f;	// To scale when VCA is used
	//GpioPin octaveDown	{GPIOD, 6, GpioPin::Type::Input};
	//GpioPin debug1		{GPIOC, 10, GpioPin::Type::Output};

	float filterStart[2] = {0.0f, 0.0f};
	float filterSlope = 0.0f;
	//float startLevel = 0.0f;
	float multSpread = 0.0f;
	float multGrow = 0.0f;

	enum class Filter {LP, HP, BP, Comb, count} filterType = Filter::LP;

	int32_t filterTypeVal = 0;					// Used for setting hysteresis on filter type


	float multipliers[maxHarmonics];
};

extern Additive additive;
